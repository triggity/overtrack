// generated by jsonenums -type=Result; DO NOT EDIT

package models

import (
	"encoding/json"
	"fmt"
)

var (
	_ResultNameToValue = map[string]Result{
		"Win":  Win,
		"Loss": Loss,
		"Draw": Draw,
	}

	_ResultValueToName = map[Result]string{
		Win:  "Win",
		Loss: "Loss",
		Draw: "Draw",
	}
)

func init() {
	var v Result
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_ResultNameToValue = map[string]Result{
			interface{}(Win).(fmt.Stringer).String():  Win,
			interface{}(Loss).(fmt.Stringer).String(): Loss,
			interface{}(Draw).(fmt.Stringer).String(): Draw,
		}
	}
}

// MarshalJSON is generated so Result satisfies json.Marshaler.
func (r Result) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _ResultValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Result: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Result satisfies json.Unmarshaler.
func (r *Result) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Result should be a string, got %s", data)
	}
	v, ok := _ResultNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Result %q", s)
	}
	*r = v
	return nil
}
