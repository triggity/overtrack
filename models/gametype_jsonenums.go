// generated by jsonenums -type=GameType; DO NOT EDIT

package models

import (
	"encoding/json"
	"fmt"
)

var (
	_GameTypeNameToValue = map[string]GameType{
		"Escort":  Escort,
		"Assault": Assault,
		"Hybrid":  Hybrid,
		"Control": Control,
	}

	_GameTypeValueToName = map[GameType]string{
		Escort:  "Escort",
		Assault: "Assault",
		Hybrid:  "Hybrid",
		Control: "Control",
	}
)

func init() {
	var v GameType
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_GameTypeNameToValue = map[string]GameType{
			interface{}(Escort).(fmt.Stringer).String():  Escort,
			interface{}(Assault).(fmt.Stringer).String(): Assault,
			interface{}(Hybrid).(fmt.Stringer).String():  Hybrid,
			interface{}(Control).(fmt.Stringer).String(): Control,
		}
	}
}

// MarshalJSON is generated so GameType satisfies json.Marshaler.
func (r GameType) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _GameTypeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid GameType: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so GameType satisfies json.Unmarshaler.
func (r *GameType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("GameType should be a string, got %s", data)
	}
	v, ok := _GameTypeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid GameType %q", s)
	}
	*r = v
	return nil
}
